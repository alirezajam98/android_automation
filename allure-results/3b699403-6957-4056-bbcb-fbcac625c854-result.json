{"name": "test_kyc", "status": "broken", "statusDetails": {"message": "TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType", "trace": "open_app_without_login = <appium.webdriver.webdriver.WebDriver (session=\"1e50a509-d97d-4353-b6e5-76927d259bba\")>\n\n    @pytest.mark.order(1)\n    @allure.feature(\"User Account Creation\")\n    @allure.story(\"Create a new user account\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_kyc(open_app_without_login):\n        driver = open_app_without_login\n        accept_page = AcceptRulesAndRegulations(driver)\n    \n        # بارگذاری فایل JSON برای دریافت متون مرجع\n        text_reference = load_text_reference()\n    \n        # متغیر برای ذخیره error تست\n        errors = []\n        try:\n            # مرحله 1: بررسی دسترسی نوتیفیکیشن\n            notification_permission_page = NotificationPermissionPage(driver)\n            notification_permission_page.allow_notification_permission()\n            logger.info(\"Clicked on 'Allow' button for notification permission.\")\n    \n            # مرحله 2: کلیک روی دکمه 'ایجاد حساب کاربری'\n            with allure.step(\"Click on 'Create Account' button\"):\n                try:\n                    logger.info(\"کلیک روی دکمه 'ایجاد حساب کاربری'...\")\n                    create_account_button = WebDriverWait(driver, 10).until(\n                        EC.presence_of_element_located((AppiumBy.ID, \"com.samanpr.blu.dev:id/openButton\"))\n                    )\n                    create_account_button.click()\n                    logger.info(\"دکمه 'ایجاد حساب کاربری' کلیک شد.\")\n                except TimeoutException:\n                    logger.info(\"No nCreate Account button displayed, continuing.\")\n    \n            # مرحله 3: بررسی دوباره نوتیفیکیشن (در صورت لزوم)\n            try:\n                notification_permission_page = NotificationPermissionPage(driver)\n                notification_permission_page.allow_notification_permission()\n                logger.info(\"Clicked on 'Allow' button for notification permission.\")\n            except TimeoutException:\n                logger.info(\"No notification permission modal displayed, continuing.\")\n    \n            # مرحله 4: کلیک روی دکمه 'باز کردن حساب'\n            with allure.step(\"Click on 'Open Account' button\"):\n                logger.info(\"کلیک روی دکمه 'باز کردن حساب'...\")\n                open_account_page = OpenAccountPage(driver)\n                open_account_page.click_open_account()\n                logger.info(\"دکمه 'باز کردن حساب' کلیک شد.\")\n    \n            # مرحله 5: انتخاب سرور 'UAT'\n            with allure.step(\"Select 'UAT' from server selection\"):\n                logger.info(\"انتخاب سرور 'UAT'...\")\n                select_server_page = SelectServerPage(driver)\n                select_server_page.select_uat_server()\n                logger.info(\"سرور 'UAT' انتخاب شد.\")\n    \n            # بررسی متن \"create_account_info_page\" اما اگر اشتباه بود، ادامه پیدا کند\n            with allure.step(\"Check 'create_account_info_page' text\"):\n                try:\n                    expected_text = text_reference[\"kyc_pages\"][\"create_account_info_page_title\"]\n                    create_account_info_page = CreateAccountInfoPage(driver)\n                    actual_text = create_account_info_page.get_account_info_page_title()\n                    assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                    logger.info(f\"متن تایتل برای صفحه توضیحات صحیح است: {actual_text}\")\n                except AssertionError as e:\n                    logger.error(f\"خطا در بررسی متن تایتل صفحه توضیحات: {e}\")\n    \n                    # گرفتن اسکرین‌شات و افزودن به گزارش\n                    screenshot_path = capture_screenshot(driver, \"account_info_title_mismatch\")\n                    allure.attach.file(screenshot_path, name=\"Mismatch Screenshot\",\n                                       attachment_type=allure.attachment_type.PNG)\n    \n                    # اضافه کردن متن خطا به گزارش\n                    allure.attach(f\"Expected: {expected_text}\\nActual: {actual_text}\", \"Mismatch in text\",\n                                  allure.attachment_type.TEXT)\n    \n                    # خطا را لاگ می‌کنیم اما ادامه می‌دهیم\n    \n            # بررسی متن \"clock_title_info_page\" اما اگر اشتباه بود، ادامه پیدا کند\n            with allure.step(\"Check 'clock_title_info_page' text\"):\n                try:\n                    expected_text = text_reference[\"kyc_pages\"][\"clock_title_info_page\"]\n                    create_account_info_page = CreateAccountInfoPage(driver)\n                    actual_text = create_account_info_page.get_account_info_page_title()\n                    assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                    logger.info(f\"متن صفحه توضیحات صحیح است: {actual_text}\")\n                except AssertionError as e:\n                    logger.error(f\"خطا در بررسی متن ساعت صفحه توضیحات: {e}\")\n                    allure.attach(f\"Expected: {expected_text}\\nActual: {actual_text}\", \"Mismatch in text\",\n                                  allure.attachment_type.TEXT)\n                    # خطا را لاگ می‌کنیم اما ادامه می‌دهیم\n    \n            # مرحله 6: کلیک روی دکمه 'شروع'\n            with allure.step(\"Click on 'Start' button\"):\n                logger.info(\"کلیک روی دکمه 'شروع'...\")\n                create_account_info_page = CreateAccountInfoPage(driver)\n                create_account_info_page.click_start()\n                logger.info(\"دکمه 'شروع' کلیک شد.\")\n    \n            # مرحله 7: بررسی و تغییر وضعیت سوییچ\n            with allure.step(\"Check and toggle the agreement switch\"):\n                initial_status = accept_page.is_switch_on()\n                logger.info(f\"Initial switch status: {'ON' if initial_status else 'OFF'}\")\n                accept_page.toggle_switch()\n                new_status = accept_page.is_switch_on()\n                logger.info(f\"Switch status after toggle: {'ON' if new_status else 'OFF'}\")\n    \n            # مرحله 8: کلیک روی دکمه 'تایید' و رفتن به مرحله وارد کردن شماره تلفن\n            with allure.step(\"Click confirm button after toggle\"):\n                logger.info(\"کلیک روی دکمه 'تایید'...\")\n                accept_page.click_confirm_button()\n                logger.info(\"دکمه 'تایید' کلیک شد و به صفحه وارد کردن شماره تلفن هدایت شد.\")\n    \n            # مرحله 9: وارد کردن شماره تلفن\n            with allure.step(\"Enter phone number\"):\n                phone_number = mobile_number_generator()\n                phone_page = EnterPhoneNumberPage(driver)\n                phone_page.enter_phone_number(phone_number)\n                logger.info(f\"شماره تلفن وارد شد: {phone_number}\")\n    \n            # مرحله 10: کلیک روی دکمه 'بعدی'\n            with allure.step(\"Click next button\"):\n                phone_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 11: بررسی متن ریفرال\n            with allure.step(\"Check 'مانند:‌ MDMGKP' text\"):\n                expected_text = text_reference[\"kyc_pages\"][\"referralInputEditText\"]\n                referral_page = ReferralPage(driver)\n                actual_text = referral_page.get_referral_field_text()\n                assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                logger.info(f\"متن ریفرال صحیح است: {actual_text}\")\n    \n            with allure.step(\"Click next button\"):\n                referral_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 12: بررسی و وارد کردن کد ملی\n            with allure.step(\"Check 'کد ملی ۱۰ رقمی' text\"):\n                expected_text = text_reference[\"kyc_pages\"][\"national_code\"]\n                national_page = NationalCodePage(driver)\n                actual_text = national_page.get_national_code_text()\n                assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                logger.info(f\"متن کد ملی صحیح است: {actual_text}\")\n    \n            with allure.step(\"Enter national code\"):\n                national_code = national_code_generator()\n                national_page.enter_national_code(national_code)\n                logger.info(f\"کدملی وارد شد: {national_code}\")\n    \n            with allure.step(\"Click next button\"):\n                national_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 13: اسکرول کردن سال\n            with allure.step(\"Scroll year field\"):\n                birth_date_page = BirthDatePage(driver)\n                birth_date_page.scroll_year()  # اسکرول کردن سال\n                logger.info(\"سال با موفقیت اسکرول شد.\")\n    \n            with allure.step(\"Click next button\"):\n                birth_date_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 14: وارد کردن نام کاربری\n            with allure.step(\"Enter new username\"):\n                username = username_generator()\n                username_page = UserNamePage(driver)\n                username_page.enter_username(username)\n                logger.info(f\"نام کاربری وارد شد: {username}\")\n    \n            with allure.step(\"Click next button\"):\n                username_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 15: وارد کردن رمز عبور\n            with allure.step(\"Enter password\"):\n                password_page = PasswordPage(driver)\n                password_page.enter_password(\"Aa123456\")\n                logger.info(\"رمز عبور وارد شد.\")\n    \n            with allure.step(\"Click next button\"):\n                password_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 16: تایید وضعیت حساب کاربری در Blu\n            with allure.step(\"Click next button\"):\n                create_account_in_blu_state_page = CreateAccountInBluStatePage(driver)\n                create_account_in_blu_state_page.click_confirm_button()\n                logger.info(\"دکمه 'ادامه' کلیک شد.\")\n    \n            # مرحله 17: انتخاب گزینه 'کارت ملی'\n            with allure.step(\"Select 'National Card' option\"):\n                select_national_card = SelectNationalCardOrTrackerIdPage(driver)\n                select_national_card.click_select_national_card()\n                logger.info(\"گزینه 'کارت ملی' انتخاب شد.\")\n    \n            try:\n                camera_permission_page = NotificationPermissionPage(driver)\n                camera_permission_page.allow_camera_permission()\n                logger.info(\"دسترسی به دوربین تأیید شد.\")\n            except TimeoutException:\n                logger.info(\"مجوز دوربین نمایش داده نشد، ادامه دهید.\")\n    \n            # مرحله 18: گرفتن عکس جلو و پشت کارت ملی\n            with allure.step(\"Take photo from front of national card\"):\n                take_photo_page = TakePhotoPage(driver)\n                take_photo_page.click_take_photo()\n                logger.info(\"عکس جلوی کارت ملی گرفته شد.\")\n    \n            with allure.step(\"Click confirm button\"):\n                confirm_photo_page = ConfirmPhotoPage(driver)\n                confirm_photo_page.click_confirm_photo()\n                confirm_photo_modal = ConfirmPhotoModal(driver)\n                confirm_photo_modal.click_confirm_photo()\n                logger.info(\"عکس تایید شد.\")\n    \n            with allure.step(\"Take photo from back of national card\"):\n                take_photo_page.click_take_photo()\n                logger.info(\"عکس پشت کارت ملی گرفته شد.\")\n    \n            with allure.step(\"Click confirm button\"):\n                confirm_photo_page.click_confirm_photo()\n                confirm_photo_modal.click_confirm_photo()\n                logger.info(\"عکس تایید شد.\")\n    \n            with allure.step(\"Click next button\"):\n                logger.info(\"کلیک روی دکمه 'ادامه'...\")\n                create_account_in_blu_state_page = CreateAccountInBluStatePage(driver)\n                create_account_in_blu_state_page.click_confirm_button()\n                logger.info(\"دکمه 'ادامه' کلیک شد.\")\n    \n            # مرحله 19: انتخاب شغل\n            with allure.step(\"Select job for user\"):\n                logger.info(\"کلیک بر روی اولین شغل\")\n                select_job_page = SelectJobPage(driver)\n                select_job_page.select_job()\n                logger.info(\"اولین شغل از لیست انتخاب شد.\")\n                logger.info(\"کلیک روی دکمه تایید...\")\n                select_job_page.click_confirm_job()\n                logger.info(\"دکمه 'ادامه' کلیک شد.\")\n    \n            with allure.step(\"Show and skip demo video\"):\n                logger.info(\"ویدیو آموزشی در حال پخش است ...\")\n                video_demo_page = VideoDemoPage(driver)\n                video_demo_page.click_confirm_video_demo()\n                logger.info(\"ویدیو آموزشی پخش و بر روی ادامه کلیک شد.\")\n    \n            try:\n                camera_permission_page.allow_camera_permission()\n                logger.info(\"مجوز دوربین تأیید شد.\")\n            except TimeoutException:\n                logger.info(\"مجوز دوربین نمایش داده نشد.\")\n    \n            # مرحله 21: ضبط ویدیو\n            with allure.step(\"Record video\"):\n                logger.info(\"دوربین سلفی جهت فیلم برداری باز شد...\")\n                video_record_page = VideoRecordingPage(driver)\n                video_record_page.click_video_recording()\n                logger.info(\"ضبط ویدیو شروع شد.\")\n                sleep(10)\n                video_record_page.click_stop_recording_button()\n                logger.info(\"ضبط ویدیو متوقف شد.\")\n                video_record_page.click_upload_video()\n                logger.info(\"ویدیو آپلود شد.\")\n    \n            with allure.step(\"Confirm video upload\"):\n                confirm_video_modal = ConfirmVideoModal(driver)\n                confirm_video_modal.click_confirm_video()\n                logger.info(\"آپلود ویدیو تایید شد.\")\n    \n            # مرحله 22: تایید نهایی و پایان\n            with allure.step(\"Final confirmation\"):\n                final_page = FinalPage(driver)\n>               final_page.click_final_confirm()\n\ntests\\kyc\\test_create_account.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\kyc\\kyc_pages.py:464: in click_final_confirm\n    confirm_button = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1e50a509-d97d-4353-b6e5-76927d259bba\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000001A13BC04E50>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at AndroidUiautomator2Driver.findElOrEls (C:\\Users\\a.jamshidi\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\find.ts:86:11)\nE           at processTicksAndRejections (node:internal/process/task_queues:95:5)\nE           at AndroidUiautomator2Driver.findElOrElsWithProcessing (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\basedriver\\commands\\find.ts:60:12)\nE           at AndroidUiautomator2Driver.findElement (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\basedriver\\commands\\find.ts:75:12)\n\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nopen_app_without_login = <appium.webdriver.webdriver.WebDriver (session=\"1e50a509-d97d-4353-b6e5-76927d259bba\")>\n\n    @pytest.mark.order(1)\n    @allure.feature(\"User Account Creation\")\n    @allure.story(\"Create a new user account\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_kyc(open_app_without_login):\n        driver = open_app_without_login\n        accept_page = AcceptRulesAndRegulations(driver)\n    \n        # بارگذاری فایل JSON برای دریافت متون مرجع\n        text_reference = load_text_reference()\n    \n        # متغیر برای ذخیره error تست\n        errors = []\n        try:\n            # مرحله 1: بررسی دسترسی نوتیفیکیشن\n            notification_permission_page = NotificationPermissionPage(driver)\n            notification_permission_page.allow_notification_permission()\n            logger.info(\"Clicked on 'Allow' button for notification permission.\")\n    \n            # مرحله 2: کلیک روی دکمه 'ایجاد حساب کاربری'\n            with allure.step(\"Click on 'Create Account' button\"):\n                try:\n                    logger.info(\"کلیک روی دکمه 'ایجاد حساب کاربری'...\")\n                    create_account_button = WebDriverWait(driver, 10).until(\n                        EC.presence_of_element_located((AppiumBy.ID, \"com.samanpr.blu.dev:id/openButton\"))\n                    )\n                    create_account_button.click()\n                    logger.info(\"دکمه 'ایجاد حساب کاربری' کلیک شد.\")\n                except TimeoutException:\n                    logger.info(\"No nCreate Account button displayed, continuing.\")\n    \n            # مرحله 3: بررسی دوباره نوتیفیکیشن (در صورت لزوم)\n            try:\n                notification_permission_page = NotificationPermissionPage(driver)\n                notification_permission_page.allow_notification_permission()\n                logger.info(\"Clicked on 'Allow' button for notification permission.\")\n            except TimeoutException:\n                logger.info(\"No notification permission modal displayed, continuing.\")\n    \n            # مرحله 4: کلیک روی دکمه 'باز کردن حساب'\n            with allure.step(\"Click on 'Open Account' button\"):\n                logger.info(\"کلیک روی دکمه 'باز کردن حساب'...\")\n                open_account_page = OpenAccountPage(driver)\n                open_account_page.click_open_account()\n                logger.info(\"دکمه 'باز کردن حساب' کلیک شد.\")\n    \n            # مرحله 5: انتخاب سرور 'UAT'\n            with allure.step(\"Select 'UAT' from server selection\"):\n                logger.info(\"انتخاب سرور 'UAT'...\")\n                select_server_page = SelectServerPage(driver)\n                select_server_page.select_uat_server()\n                logger.info(\"سرور 'UAT' انتخاب شد.\")\n    \n            # بررسی متن \"create_account_info_page\" اما اگر اشتباه بود، ادامه پیدا کند\n            with allure.step(\"Check 'create_account_info_page' text\"):\n                try:\n                    expected_text = text_reference[\"kyc_pages\"][\"create_account_info_page_title\"]\n                    create_account_info_page = CreateAccountInfoPage(driver)\n                    actual_text = create_account_info_page.get_account_info_page_title()\n                    assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                    logger.info(f\"متن تایتل برای صفحه توضیحات صحیح است: {actual_text}\")\n                except AssertionError as e:\n                    logger.error(f\"خطا در بررسی متن تایتل صفحه توضیحات: {e}\")\n    \n                    # گرفتن اسکرین‌شات و افزودن به گزارش\n                    screenshot_path = capture_screenshot(driver, \"account_info_title_mismatch\")\n                    allure.attach.file(screenshot_path, name=\"Mismatch Screenshot\",\n                                       attachment_type=allure.attachment_type.PNG)\n    \n                    # اضافه کردن متن خطا به گزارش\n                    allure.attach(f\"Expected: {expected_text}\\nActual: {actual_text}\", \"Mismatch in text\",\n                                  allure.attachment_type.TEXT)\n    \n                    # خطا را لاگ می‌کنیم اما ادامه می‌دهیم\n    \n            # بررسی متن \"clock_title_info_page\" اما اگر اشتباه بود، ادامه پیدا کند\n            with allure.step(\"Check 'clock_title_info_page' text\"):\n                try:\n                    expected_text = text_reference[\"kyc_pages\"][\"clock_title_info_page\"]\n                    create_account_info_page = CreateAccountInfoPage(driver)\n                    actual_text = create_account_info_page.get_account_info_page_title()\n                    assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                    logger.info(f\"متن صفحه توضیحات صحیح است: {actual_text}\")\n                except AssertionError as e:\n                    logger.error(f\"خطا در بررسی متن ساعت صفحه توضیحات: {e}\")\n                    allure.attach(f\"Expected: {expected_text}\\nActual: {actual_text}\", \"Mismatch in text\",\n                                  allure.attachment_type.TEXT)\n                    # خطا را لاگ می‌کنیم اما ادامه می‌دهیم\n    \n            # مرحله 6: کلیک روی دکمه 'شروع'\n            with allure.step(\"Click on 'Start' button\"):\n                logger.info(\"کلیک روی دکمه 'شروع'...\")\n                create_account_info_page = CreateAccountInfoPage(driver)\n                create_account_info_page.click_start()\n                logger.info(\"دکمه 'شروع' کلیک شد.\")\n    \n            # مرحله 7: بررسی و تغییر وضعیت سوییچ\n            with allure.step(\"Check and toggle the agreement switch\"):\n                initial_status = accept_page.is_switch_on()\n                logger.info(f\"Initial switch status: {'ON' if initial_status else 'OFF'}\")\n                accept_page.toggle_switch()\n                new_status = accept_page.is_switch_on()\n                logger.info(f\"Switch status after toggle: {'ON' if new_status else 'OFF'}\")\n    \n            # مرحله 8: کلیک روی دکمه 'تایید' و رفتن به مرحله وارد کردن شماره تلفن\n            with allure.step(\"Click confirm button after toggle\"):\n                logger.info(\"کلیک روی دکمه 'تایید'...\")\n                accept_page.click_confirm_button()\n                logger.info(\"دکمه 'تایید' کلیک شد و به صفحه وارد کردن شماره تلفن هدایت شد.\")\n    \n            # مرحله 9: وارد کردن شماره تلفن\n            with allure.step(\"Enter phone number\"):\n                phone_number = mobile_number_generator()\n                phone_page = EnterPhoneNumberPage(driver)\n                phone_page.enter_phone_number(phone_number)\n                logger.info(f\"شماره تلفن وارد شد: {phone_number}\")\n    \n            # مرحله 10: کلیک روی دکمه 'بعدی'\n            with allure.step(\"Click next button\"):\n                phone_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 11: بررسی متن ریفرال\n            with allure.step(\"Check 'مانند:‌ MDMGKP' text\"):\n                expected_text = text_reference[\"kyc_pages\"][\"referralInputEditText\"]\n                referral_page = ReferralPage(driver)\n                actual_text = referral_page.get_referral_field_text()\n                assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                logger.info(f\"متن ریفرال صحیح است: {actual_text}\")\n    \n            with allure.step(\"Click next button\"):\n                referral_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 12: بررسی و وارد کردن کد ملی\n            with allure.step(\"Check 'کد ملی ۱۰ رقمی' text\"):\n                expected_text = text_reference[\"kyc_pages\"][\"national_code\"]\n                national_page = NationalCodePage(driver)\n                actual_text = national_page.get_national_code_text()\n                assert actual_text == expected_text, f\"Expected '{expected_text}', but got '{actual_text}'\"\n                logger.info(f\"متن کد ملی صحیح است: {actual_text}\")\n    \n            with allure.step(\"Enter national code\"):\n                national_code = national_code_generator()\n                national_page.enter_national_code(national_code)\n                logger.info(f\"کدملی وارد شد: {national_code}\")\n    \n            with allure.step(\"Click next button\"):\n                national_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 13: اسکرول کردن سال\n            with allure.step(\"Scroll year field\"):\n                birth_date_page = BirthDatePage(driver)\n                birth_date_page.scroll_year()  # اسکرول کردن سال\n                logger.info(\"سال با موفقیت اسکرول شد.\")\n    \n            with allure.step(\"Click next button\"):\n                birth_date_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 14: وارد کردن نام کاربری\n            with allure.step(\"Enter new username\"):\n                username = username_generator()\n                username_page = UserNamePage(driver)\n                username_page.enter_username(username)\n                logger.info(f\"نام کاربری وارد شد: {username}\")\n    \n            with allure.step(\"Click next button\"):\n                username_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 15: وارد کردن رمز عبور\n            with allure.step(\"Enter password\"):\n                password_page = PasswordPage(driver)\n                password_page.enter_password(\"Aa123456\")\n                logger.info(\"رمز عبور وارد شد.\")\n    \n            with allure.step(\"Click next button\"):\n                password_page.click_next_button()\n                logger.info(\"دکمه 'بعدی' کلیک شد.\")\n    \n            # مرحله 16: تایید وضعیت حساب کاربری در Blu\n            with allure.step(\"Click next button\"):\n                create_account_in_blu_state_page = CreateAccountInBluStatePage(driver)\n                create_account_in_blu_state_page.click_confirm_button()\n                logger.info(\"دکمه 'ادامه' کلیک شد.\")\n    \n            # مرحله 17: انتخاب گزینه 'کارت ملی'\n            with allure.step(\"Select 'National Card' option\"):\n                select_national_card = SelectNationalCardOrTrackerIdPage(driver)\n                select_national_card.click_select_national_card()\n                logger.info(\"گزینه 'کارت ملی' انتخاب شد.\")\n    \n            try:\n                camera_permission_page = NotificationPermissionPage(driver)\n                camera_permission_page.allow_camera_permission()\n                logger.info(\"دسترسی به دوربین تأیید شد.\")\n            except TimeoutException:\n                logger.info(\"مجوز دوربین نمایش داده نشد، ادامه دهید.\")\n    \n            # مرحله 18: گرفتن عکس جلو و پشت کارت ملی\n            with allure.step(\"Take photo from front of national card\"):\n                take_photo_page = TakePhotoPage(driver)\n                take_photo_page.click_take_photo()\n                logger.info(\"عکس جلوی کارت ملی گرفته شد.\")\n    \n            with allure.step(\"Click confirm button\"):\n                confirm_photo_page = ConfirmPhotoPage(driver)\n                confirm_photo_page.click_confirm_photo()\n                confirm_photo_modal = ConfirmPhotoModal(driver)\n                confirm_photo_modal.click_confirm_photo()\n                logger.info(\"عکس تایید شد.\")\n    \n            with allure.step(\"Take photo from back of national card\"):\n                take_photo_page.click_take_photo()\n                logger.info(\"عکس پشت کارت ملی گرفته شد.\")\n    \n            with allure.step(\"Click confirm button\"):\n                confirm_photo_page.click_confirm_photo()\n                confirm_photo_modal.click_confirm_photo()\n                logger.info(\"عکس تایید شد.\")\n    \n            with allure.step(\"Click next button\"):\n                logger.info(\"کلیک روی دکمه 'ادامه'...\")\n                create_account_in_blu_state_page = CreateAccountInBluStatePage(driver)\n                create_account_in_blu_state_page.click_confirm_button()\n                logger.info(\"دکمه 'ادامه' کلیک شد.\")\n    \n            # مرحله 19: انتخاب شغل\n            with allure.step(\"Select job for user\"):\n                logger.info(\"کلیک بر روی اولین شغل\")\n                select_job_page = SelectJobPage(driver)\n                select_job_page.select_job()\n                logger.info(\"اولین شغل از لیست انتخاب شد.\")\n                logger.info(\"کلیک روی دکمه تایید...\")\n                select_job_page.click_confirm_job()\n                logger.info(\"دکمه 'ادامه' کلیک شد.\")\n    \n            with allure.step(\"Show and skip demo video\"):\n                logger.info(\"ویدیو آموزشی در حال پخش است ...\")\n                video_demo_page = VideoDemoPage(driver)\n                video_demo_page.click_confirm_video_demo()\n                logger.info(\"ویدیو آموزشی پخش و بر روی ادامه کلیک شد.\")\n    \n            try:\n                camera_permission_page.allow_camera_permission()\n                logger.info(\"مجوز دوربین تأیید شد.\")\n            except TimeoutException:\n                logger.info(\"مجوز دوربین نمایش داده نشد.\")\n    \n            # مرحله 21: ضبط ویدیو\n            with allure.step(\"Record video\"):\n                logger.info(\"دوربین سلفی جهت فیلم برداری باز شد...\")\n                video_record_page = VideoRecordingPage(driver)\n                video_record_page.click_video_recording()\n                logger.info(\"ضبط ویدیو شروع شد.\")\n                sleep(10)\n                video_record_page.click_stop_recording_button()\n                logger.info(\"ضبط ویدیو متوقف شد.\")\n                video_record_page.click_upload_video()\n                logger.info(\"ویدیو آپلود شد.\")\n    \n            with allure.step(\"Confirm video upload\"):\n                confirm_video_modal = ConfirmVideoModal(driver)\n                confirm_video_modal.click_confirm_video()\n                logger.info(\"آپلود ویدیو تایید شد.\")\n    \n            # مرحله 22: تایید نهایی و پایان\n            with allure.step(\"Final confirmation\"):\n                final_page = FinalPage(driver)\n                final_page.click_final_confirm()\n                logger.info(\"مراحل ایجاد حساب کاربری با موفقیت به پایان رسید.\")\n        except Exception as e:\n    \n            logger.error(f\"خطا رخ داد: {e}\")\n            # اسکرین‌شات در صورت بروز هرگونه خطا\n            screenshot_path = capture_screenshot(driver, \"account_creation_error\")\n>           allure.attach.file(screenshot_path, name=\"Error Screenshot\", attachment_type=allure.attachment_type.PNG)\n\ntests\\kyc\\test_create_account.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\allure_pytest\\listener.py:256: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\allure_commons\\logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\nC:\\Users\\a.jamshidi\\AppData\\Local\\Programs\\Python\\Python38\\lib\\shutil.py:435: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\nC:\\Users\\a.jamshidi\\AppData\\Local\\Programs\\Python\\Python38\\lib\\shutil.py:243: in copyfile\n    if _samefile(src, dst):\nC:\\Users\\a.jamshidi\\AppData\\Local\\Programs\\Python\\Python38\\lib\\shutil.py:220: in _samefile\n    return os.path.samefile(src, dst)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nf1 = None\nf2 = WindowsPath('G:/android_automation/allure-results/53ca5002-df3d-42b8-9ea1-9238652b8487-attachment.png')\n\n    def samefile(f1, f2):\n        \"\"\"Test whether two pathnames reference the same actual file or directory\n    \n        This is determined by the device number and i-node number and\n        raises an exception if an os.stat() call on either pathname fails.\n        \"\"\"\n>       s1 = os.stat(f1)\nE       TypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType\n\nC:\\Users\\a.jamshidi\\AppData\\Local\\Programs\\Python\\Python38\\lib\\genericpath.py:100: TypeError"}, "steps": [{"name": "Click on 'Create Account' button", "status": "passed", "start": 1730123202095, "stop": 1730123203196}, {"name": "Click on 'Open Account' button", "status": "passed", "start": 1730123203251, "stop": 1730123204958}, {"name": "Select 'UAT' from server selection", "status": "passed", "start": 1730123204958, "stop": 1730123205115}, {"name": "Check 'create_account_info_page' text", "status": "passed", "start": 1730123205115, "stop": 1730123206395}, {"name": "Check 'clock_title_info_page' text", "status": "passed", "attachments": [{"name": "Mismatch in text", "source": "c1f5556d-5053-4ade-b99c-ffdc9ba13e38-attachment.txt", "type": "text/plain"}], "start": 1730123206395, "stop": 1730123206495}, {"name": "Click on 'Start' button", "status": "passed", "start": 1730123206495, "stop": 1730123207267}, {"name": "Check and toggle the agreement switch", "status": "passed", "start": 1730123207267, "stop": 1730123208356}, {"name": "Click confirm button after toggle", "status": "passed", "start": 1730123208356, "stop": 1730123209636}, {"name": "Enter phone number", "status": "passed", "start": 1730123209636, "stop": 1730123210429}, {"name": "Click next button", "status": "passed", "start": 1730123210429, "stop": 1730123213315}, {"name": "Check 'مانند:‌ MDMGKP' text", "status": "passed", "start": 1730123213315, "stop": 1730123213411}, {"name": "Click next button", "status": "passed", "start": 1730123213411, "stop": 1730123214671}, {"name": "Check 'کد ملی ۱۰ رقمی' text", "status": "passed", "start": 1730123214671, "stop": 1730123214752}, {"name": "Enter national code", "status": "passed", "start": 1730123214752, "stop": 1730123215531}, {"name": "Click next button", "status": "passed", "start": 1730123215531, "stop": 1730123217492}, {"name": "Scroll year field", "status": "passed", "start": 1730123217492, "stop": 1730123218069}, {"name": "Click next button", "status": "passed", "start": 1730123218069, "stop": 1730123220729}, {"name": "Enter new username", "status": "passed", "start": 1730123220729, "stop": 1730123222132}, {"name": "Click next button", "status": "passed", "start": 1730123222132, "stop": 1730123223348}, {"name": "Enter password", "status": "passed", "start": 1730123223348, "stop": 1730123223491}, {"name": "Click next button", "status": "passed", "start": 1730123223491, "stop": 1730123224813}, {"name": "Click next button", "status": "passed", "start": 1730123224813, "stop": 1730123226825}, {"name": "Select 'National Card' option", "status": "passed", "start": 1730123226825, "stop": 1730123227641}, {"name": "Take photo from front of national card", "status": "passed", "start": 1730123227699, "stop": 1730123259260}, {"name": "Click confirm button", "status": "passed", "start": 1730123259260, "stop": 1730123263186}, {"name": "Take photo from back of national card", "status": "passed", "start": 1730123263186, "stop": 1730123294872}, {"name": "Click confirm button", "status": "passed", "start": 1730123294872, "stop": 1730123299014}, {"name": "Click next button", "status": "passed", "start": 1730123299014, "stop": 1730123300477}, {"name": "Select job for user", "status": "passed", "start": 1730123300477, "stop": 1730123302972}, {"name": "Show and skip demo video", "status": "passed", "start": 1730123302972, "stop": 1730123323400}, {"name": "Record video", "status": "passed", "start": 1730123323461, "stop": 1730123337363}, {"name": "Confirm video upload", "status": "passed", "start": 1730123337363, "stop": 1730123338073}, {"name": "Final confirmation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\nNoSuchElementError: An element could not be located on the page using the given search parameters.\n    at AndroidUiautomator2Driver.findElOrEls (C:\\Users\\a.jamshidi\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\find.ts:86:11)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at AndroidUiautomator2Driver.findElOrElsWithProcessing (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\basedriver\\commands\\find.ts:60:12)\n    at AndroidUiautomator2Driver.findElement (C:\\Users\\a.jamshidi\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\basedriver\\commands\\find.ts:75:12)\n", "trace": "  File \"G:\\android_automation\\tests\\kyc\\test_create_account.py\", line 300, in test_kyc\n    final_page.click_final_confirm()\n  File \"G:\\android_automation\\pages\\kyc\\kyc_pages.py\", line 464, in click_final_confirm\n    confirm_button = WebDriverWait(self.driver, 10).until(\n  File \"C:\\Users\\a.jamshidi\\android_automation\\android_automation\\.venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1730123338073, "stop": 1730123348114}], "attachments": [{"name": "account_creation_error_20241028_171908.png", "source": "b7469eea-837e-4f01-8844-52792eaa1afd-attachment.png", "type": "image/png"}, {"name": "Error Screenshot", "source": "53ca5002-df3d-42b8-9ea1-9238652b8487-attachment.png", "type": "image/png"}, {"name": "log", "source": "8ed5c44f-d726-4386-8fa6-a41927a33e6d-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "89f13a2b-6807-464f-961d-45dd182ebfc0-attachment.txt", "type": "text/plain"}], "start": 1730123196957, "stop": 1730123348745, "uuid": "cf1febe9-f7b2-45fa-9f77-cc52cd0c1a65", "historyId": "190b09abcd6c5ed17aef79066d090e97", "testCaseId": "190b09abcd6c5ed17aef79066d090e97", "fullName": "tests.kyc.test_create_account#test_kyc", "labels": [{"name": "severity", "value": "critical"}, {"name": "story", "value": "Create a new user account"}, {"name": "feature", "value": "User Account Creation"}, {"name": "tag", "value": "order(1)"}, {"name": "parentSuite", "value": "tests.kyc"}, {"name": "suite", "value": "test_create_account"}, {"name": "host", "value": "ajamshidi-lap-qa"}, {"name": "thread", "value": "118864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.kyc.test_create_account"}]}